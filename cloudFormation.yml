AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: dailymail

Parameters:
  GitHubRepo:
    Type: String
    Default: dailymail

  GitHubUser:
    Type: String
    Default: ikalff

  GitHubBranch:
    Type: String
    Default: main

  StageName:
    Type: String
    Default: production

  Region:
    Type: String
    Default: eu-west-1

Resources:
  # PIPELINE

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ssm:GetParameters
                  - cloudfront:CreateInvalidation
                  - lambda:InvokeFunction
                  - lambda:PublishLayerVersion
                  - ses:*
                  - s3:*
                Resource: "*"
        - PolicyName: "Resources"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: !Ref CodeStarConnection
                Action:
                  - codestar-connections:UseConnection

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - codestar-connections:UseConnection
                  - codedeploy:CreateDeployment
                  - codedeploy:CreateDeploymentGroup
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - cloudformation:*
                  - events:*
                  - s3:*
                  - lambda:*

  CodePipelineDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:*
                  - iam:*
                  - cognito-idp:*
                  - codepipeline:*
                  - cloudformation:*
                  - cloudfront:*
                  - apigateway:*
                  - lambda:*
                  - dynamodb:*
                  - codestar-connections:*
                  - s3:*
                  - ses:*
                  - secretsmanager:*
                  - events:*

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  CodeStarConnection:
    Type: "AWS::CodeStarConnections::Connection"
    Properties:
      ConnectionName: !Sub ${AWS::StackName}Connection
      ProviderType: GitHub

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}CodeBuildProject
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildPostDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspecPostDeploy.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      Name: !Sub ${AWS::StackName}CodeBuildPostDeployProject
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                BranchName: main
                FullRepositoryId: !Sub ${GitHubUser}/${GitHubRepo}
              OutputArtifacts:
                - Name: AppArtifact
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: AppArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: Deploy
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref AWS::StackName
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: BuildArtifact::generatedCloudFormation.yml
                OutputFileName: cloudformationOutputs.json
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: DeployOutputsArtifact

        - Name: PostDeploy
          Actions:
            - Name: PostDeploy
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: BuildArtifact
                - Name: DeployOutputsArtifact
              Configuration:
                ProjectName: !Ref CodeBuildPostDeployProject
                PrimarySource: BuildArtifact

  #################### END OF PIPELINE TEMPLATE ####################

  #################### Game app ####################

  # App bucket
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  AppOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Origin Access Identity for CloudFront distribution

  # S3 Bucket Policy to allow CloudFront access
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt AppOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${AppBucket.Arn}/*"
          - Sid: AllowPutObject
            Effect: Allow
            Principal:
              AWS: !GetAtt CodeBuildServiceRole.Arn
            Action: "s3:PutObject"
            Resource: !Sub "${AppBucket.Arn}/*"

  # CloudFront Distribution
  AppPublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: "true"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3AppBucket
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: S3AppBucket
            DomainName: !GetAtt AppBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${AppOriginAccessIdentity}"



#################### Outputs ####################

Outputs:

  AppBucket:
    Value: !Ref AppBucket

  AppBucketURL:
    Value: !GetAtt AppBucket.WebsiteURL

  AppCloudFrontURL:
    Value: !GetAtt AppPublicDistribution.DomainName

  AppCloudfrontDistributionId:
    Value: !Ref AppPublicDistribution

